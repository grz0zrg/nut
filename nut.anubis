 Nut - Minimalist build system for JavaScript app.

 Usage: anbexec nut -appfile:"[app_filename].[js|css]" ...

 Nut 2014 - 2017
 ----------------------------
 by Julien Verneuil (grz0zrg)

read tools/basis.anubis
read tools/streams.anubis
read tools/cmd_line.anubis
read system/string.anubis
read system/files.anubis

define One seek_include
    (
        String root,
        String filename,
        WStream out
    ).

public define macro Maybe(Int)
    Maybe(Int) x | Maybe(Int) y =
        if x is
        {
            failure then
                if y is
                {
                    failure then failure,
                    success(n) then success(n)
                },
            success(n) then success(n)
        }.

define Maybe(String) get_string_after_comment_tag
    (
        String str
    ) =
        if find("/", str, 0) is
        {
            failure then failure,
            success(n) then
                if find("*", str, n) is
                {
                    failure then failure,
                    success(n2) then
                        success(substr(str, n2, length(str) - n2 - 1))
                }
        }.


define Maybe(String) get_line_comment_content
    (
        String str
    ) =
        if get_string_after_comment_tag(str) is
        {
            failure then failure,
            success(content) then
                with reversed_str = implode(reverse(explode(content))),
                if get_string_after_comment_tag(reversed_str) is
                {
                    failure then failure,
                    success(content2) then
                        success(implode(reverse(explode(content2))))
                }
        }.

define One one_file
    (
        String root,
        Stream s,
        WStream out
    ) =
        if read_line(s) is
        {
            failure    then unique,
            success(l) then
                if get_line_comment_content(l) is
                {
                    failure then print(out, l)
                    success(lc) then
                        with _include = "#include ",
                        if find(_include, lc, 0) is
                        {
                            failure    then print(out, l),
                            success(n) then
                                with k = n + length(_include),
                                seek_include(root, substr(lc, k, length(lc) - k - 1), out)
                        }
                };
            one_file(root, s, out)
        }.

define One seek_include
    (
        String root,
        String filename,
        WStream out
    ) =
        with fullpath = root + filename,
        if file(fullpath, read) is
        {
            failure      then
              println("File not found: " + fullpath)
            success(f)   then
                with s = make_stream(f),
                    one_file(root, s, out)
        }.

define Word32 last_modified
    (
        FileDescription fd
    ) =
        if fd is
        {
            no_info(name)            then println("File " + name + " has no infos attached. (ignored)"); 0,
            file(name,size,mode,lm)  then lm,
            link(name,value,mode,lm) then lm,
            directory(name,mode,lm)  then lm
        }.

define Bool compare_date
    (
        FileDescription fd1,
        FileDescription fd2
    ) =
        last_modified(fd1) >+ last_modified(fd2).

define Bool changed
    (
        String root,
        String out_name,
        String filetype,
        String min_output_filename
    ).

define Bool subchanged
    (
        String root,
        String out_name,
        String filetype,
        String min_output_filename,
        List(FileDescription) fdescs,
    ) =
    if fdescs is
    {
       []      then false,
       [h . t] then
         if changed(root + "/" + name(h), out_name, filetype, min_output_filename) then
           true
         else
           subchanged(root, out_name, filetype, min_output_filename, t)
    }.

define Bool changed
    (
        String root,
        String out_name,
        String filetype,
        String min_output_filename
    ) =
        with descs  = directory_full_list(root, "*." + filetype, "", "") + directory_full_list("dist/", out_name, "", "") + directory_full_list("dist/", min_output_filename, "", ""),
             descs1 = merge_sort(descs, compare_date),
             if if descs1 is
             {
                []      then false,
                [h . t] then
                    if name(h) = out_name
                    then false
                    else if name(h) = min_output_filename
                    then false
                    else
                        println("'" + root + name(h) + "' was modified.");
                        true
             } then
               println("Building " + out_name + "...");
               true
             else
               subchanged(root, out_name, filetype, min_output_filename, directory_full_list(root, "", "", "*")).

define One execute_build_program
    (
        String program,
        List(String) args
    ) =
        if execute(get_current_directory, program, args) is
        {
            failure then println(program + "execute has failed"),
            success(b) then println("Build done."); unique
        }.

define One merge
    (
        String root,
        String filetype,
        String prefix,
        String filename,
        String min_output_filename,
        String build_program_name,
        List(String) build_program_args
    ) =
        if changed(root, filename, filetype, min_output_filename)
        then
        if file("dist/"+filename, new) is
        {
            failure      then println("Cannot create file " + filename + " in the dist directory."),
            success(out) then
                seek_include(root, prefix + filename, weaken(out));
                execute_build_program(build_program_name, build_program_args)
        }
        else
            unique.

define One watch
    (
        String prefix,
        List(String) args,
        List(String) current
    ) =
        if current is
        {
            [ ] then
                sleep(2000);
                watch(prefix, args, args),
            [filename . t] then
                since ((String,String))split_path(filename) is (root,fname),
                (if ends_with(filename, ".js") then
                    with min_output_filename = substr(fname, 0, length(fname) - 2) + "min.js",
                    merge(root + "/", "js", prefix, fname, min_output_filename, "uglifyjs", ["--compress", "--mangle","--screw-ie8", "-o", "dist/"+min_output_filename, "--", "dist/"+fname])
                else if ends_with(filename, ".css") then
                    with min_output_filename = substr(fname, 0, length(fname) - 3) + "min.css",
                    merge(root + "/", "css", prefix, fname, min_output_filename, "csso", ["dist/"+fname, "dist/"+min_output_filename])
                else
                    println("App file " + filename + " extension not recognized.");
                    unique);
                watch(prefix, args, t)
        }.

define One watch
    (
        List(String) args,
        List(String) current
    ) =
        watch("", args, current).

define List(String) get_filelist
    (
        String root,
        List(FileDescription) descs,
        List(String) files
    ) =
        if descs is
        {
            []      then files,
            [h . t] then
              get_filelist(root, t, [ root + "/" + name(h) . files ])
        }.

define One watch_dirs
    (
        List(String) dirs
    ) =
        if dirs is
        {
            [ ] then unique,
            [dir . t] then
                with files_js = get_filelist(dir, directory_full_list(dir, "*.js", "", ""), []),
                     files_css = get_filelist(dir, directory_full_list(dir, "*.css", "", ""), []),
                delegate protect watch(files_js, files_js),
                delegate protect watch(files_css, files_css),
                watch_dirs(t)
        }.

global define One nut
    (
        List(String) args
    ) =
        if args is
        {
            [ ] then println("Usage: anbexec nut -appfile:\"[output_filename].[js|css]\" ..."),
            [filename . t] then
                with appfiles = get_parameters(args,(String s) |-> extract_String(s,"-appfile:")),
                with appdir = get_parameters(args,(String s) |-> extract_String(s,"-appdir:")),
                make_directories("dist");
                watch_dirs(appdir);
                watch("app_", appfiles, appfiles)
        }.
